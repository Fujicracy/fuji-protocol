{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x60A048475Ee20D8fCe3Ef18d4134D4Be7771c204",
    "txHash": "0xe85cf8a28e7e879914a1ddac274a47941aebfb9495a20edf1998333ec27df939"
  },
  "proxies": [
    {
      "address": "0xaAb2AAfBFf7419Ff85181d3A846bA9045803dd67",
      "txHash": "0x75a18ab0576f445fa32184c467bfc524500ee4e8c6bdf6447d13e7895db1d54c",
      "kind": "transparent"
    },
    {
      "address": "0xB4E2eC87f8E6E166929A900Ed433c4589d721D70",
      "txHash": "0x08165b7e9518f365222a1bcb25f43a42c69717a8de1625d95aeacca84eeb9576",
      "kind": "transparent"
    },
    {
      "address": "0x67908BE314DE4A16AD34f401f5d99e061DFE7334",
      "txHash": "0x5ccafe4b865a6dd041b0c75b0b8ea03b0611dc0042135053d3d28d2255dc4f1e",
      "kind": "transparent"
    },
    {
      "address": "0x085a99366861bd9c0B040b8Ad3882ab44327617e",
      "txHash": "0xea58c265b8c53a686f01c596d6c1c5ef5e70ede8d1b33649dbc46fa49630c78b",
      "kind": "transparent"
    },
    {
      "address": "0xca49CB6964ABDC38486D2BD4f5040fe0D204da53",
      "txHash": "0x2da0dc72050a7d8969c680a8d651ed822163766ea3de9c4f0dd5eca32507732e",
      "kind": "transparent"
    },
    {
      "address": "0xcb2A80380206c5bF2AAd4A0fAB2b2C31A59C208B",
      "txHash": "0x1e7263834106657f5e439e17eae72889654a07270b52988d409ae5e29dcf7d5e",
      "kind": "transparent"
    },
    {
      "address": "0x1bAc9447611b5d1D763906dC60269Ac61E04CD4B",
      "txHash": "0x7b9d9789c0f3cd3c3cd2a8a1a2473965885a4510993db0e33f42fc2206f46c41",
      "kind": "transparent"
    },
    {
      "address": "0x0793Cf99906423AaF17c736dcAcBFE843931686a",
      "txHash": "0xa9d76620c917a37935a51e4669eab6223ab741f47f4922dae671608f2ad19640",
      "kind": "transparent"
    },
    {
      "address": "0xa4e25A3D190AFa0e54609B160391e63B678D0315",
      "txHash": "0x0dc2a2cd6c29448c5c1333126ad80fc98bfc33199108f6413061e14366505adb",
      "kind": "transparent"
    },
    {
      "address": "0x8009A853b00988Ef8E2D7c9E493E1746abdf7A46",
      "txHash": "0x051e32c6a206363bc07c36e65a896b97182f4442ac92ebcbdaae94f9ba0a03a2",
      "kind": "transparent"
    },
    {
      "address": "0x3b9d9D0A953AE2a56F44E4f16D4426562F3137ee",
      "txHash": "0xe9424e654cb0215896909710ebe88aa715eb71288d60d0de1d36eec0c5c810d4",
      "kind": "transparent"
    },
    {
      "address": "0xD3B69dB6322dBA2BF24E0f6201c79a59757c80bd",
      "txHash": "0x73dfe39462fb95a43d8ca8bdddfeec89fc7e65461d3d217f5cb79841d5929634",
      "kind": "transparent"
    },
    {
      "address": "0x4A58e09ac70C856F8115222811a69C991213D8C3",
      "txHash": "0xa1b3d93e643535f3830dc8fa616ed29eef6aa5a03e7be34d0748933e0eec2e44",
      "kind": "transparent"
    },
    {
      "address": "0xF47C09a06Bf0EDFefDa628CEbCd50B42a1BaE1f2",
      "txHash": "0xa4ff181ba382aca7d5aac747b6d1d717801c605b1a22e7cb83ccfebd1d433213",
      "kind": "transparent"
    },
    {
      "address": "0x14b35FBC82b3A3b95843062b96861ddBdEEFaEE0",
      "kind": "transparent"
    },
    {
      "address": "0x5fBdBd8e5fB3566d2dCd2EA7095869dFe6Cd1f2B",
      "txHash": "0x3337868988a5553cc9726a5c9cd1d29fef1e7d7d5315401e6645d15937e7b44a",
      "kind": "uups"
    }
  ],
  "impls": {
    "d843a782bac05ba348626a7a67f58791f6d003bb17c2fe319dba87551ae6ca56": {
      "address": "0x749a2A8850C1861aFa1003D876d90C9b730cA58e",
      "txHash": "0xc865f75817be3e462da7ed051457dcadfdd2d223d7a191374cdb5a6fec331044",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "FujiAdmin",
            "label": "_flasher",
            "type": "t_address",
            "src": "contracts/FujiAdmin.sol:11"
          },
          {
            "contract": "FujiAdmin",
            "label": "_fliquidator",
            "type": "t_address",
            "src": "contracts/FujiAdmin.sol:12"
          },
          {
            "contract": "FujiAdmin",
            "label": "_ftreasury",
            "type": "t_address_payable",
            "src": "contracts/FujiAdmin.sol:13"
          },
          {
            "contract": "FujiAdmin",
            "label": "_controller",
            "type": "t_address",
            "src": "contracts/FujiAdmin.sol:14"
          },
          {
            "contract": "FujiAdmin",
            "label": "_vaultHarvester",
            "type": "t_address",
            "src": "contracts/FujiAdmin.sol:15"
          },
          {
            "contract": "FujiAdmin",
            "label": "validVault",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/FujiAdmin.sol:17"
          },
          {
            "contract": "FujiAdmin",
            "label": "_swapper",
            "type": "t_address",
            "src": "contracts/FujiAdmin.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "86ff3faca9241dff633ddd0094916d448862957b339dad82eda559da09728308": {
      "address": "0xd0dc4Cc10fCf3fEe2bF5310c0E4e097b60F097D3",
      "txHash": "0x484fb81bac189848366093884f653a76f43c7a9cdb9c55ef0208c9d7604e049c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "FujiBaseERC1155",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/abstracts/fujiERC1155/FujiBaseERC1155.sol:27"
          },
          {
            "contract": "FujiBaseERC1155",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/abstracts/fujiERC1155/FujiBaseERC1155.sol:30"
          },
          {
            "contract": "FujiBaseERC1155",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/abstracts/fujiERC1155/FujiBaseERC1155.sol:33"
          },
          {
            "contract": "FujiBaseERC1155",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/abstracts/fujiERC1155/FujiBaseERC1155.sol:37"
          },
          {
            "contract": "ClaimableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/abstracts/claimable/ClaimableUpgradeable.sol:9"
          },
          {
            "contract": "ClaimableUpgradeable",
            "label": "pendingOwner",
            "type": "t_address",
            "src": "contracts/abstracts/claimable/ClaimableUpgradeable.sol:10"
          },
          {
            "contract": "F1155Manager",
            "label": "addrPermit",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/abstracts/fujiERC1155/F1155Manager.sol:17"
          },
          {
            "contract": "FujiERC1155",
            "label": "assetIDs",
            "type": "t_mapping(t_enum(AssetType)10920,t_mapping(t_address,t_uint256))",
            "src": "contracts/FujiERC1155.sol:18"
          },
          {
            "contract": "FujiERC1155",
            "label": "assetIDtype",
            "type": "t_mapping(t_uint256,t_enum(AssetType)10920)",
            "src": "contracts/FujiERC1155.sol:21"
          },
          {
            "contract": "FujiERC1155",
            "label": "qtyOfManagedAssets",
            "type": "t_uint64",
            "src": "contracts/FujiERC1155.sol:23"
          },
          {
            "contract": "FujiERC1155",
            "label": "indexes",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/FujiERC1155.sol:27"
          }
        ],
        "types": {
          "t_mapping(t_enum(AssetType)10920,t_mapping(t_address,t_uint256))": {
            "label": "mapping(enum IFujiERC1155.AssetType => mapping(address => uint256))"
          },
          "t_enum(AssetType)10920": {
            "label": "enum IFujiERC1155.AssetType",
            "members": [
              "collateralToken",
              "debtToken"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_enum(AssetType)10920)": {
            "label": "mapping(uint256 => enum IFujiERC1155.AssetType)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e73f68ad597f1bc8bfc0bc0ec8e04ccca04208fc15d091fdfa18f5a947d74147": {
      "address": "0x8513C2DB99df213887F63300b23c6Dd31f1d14B0",
      "txHash": "0x05a5888b2f138e17730048181019aa1f83116512fb039c36bed2124190b625ce",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "VaultControlUpgradeable",
            "label": "vAssets",
            "type": "t_struct(VaultAssets)11293_storage",
            "src": "contracts/abstracts/vault/VaultBaseUpgradeable.sol:12"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "safetyF",
            "type": "t_struct(Factor)6861_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:35"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "collatF",
            "type": "t_struct(Factor)6861_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:38"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "protocolFee",
            "type": "t_struct(Factor)6861_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:41"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "bonusLiqF",
            "type": "t_struct(Factor)6861_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:44"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "providers",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:47"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "activeProvider",
            "type": "t_address",
            "src": "contracts/fantom/FujiVaultFTM.sol:48"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_fujiAdmin",
            "type": "t_contract(IFujiAdmin)10915",
            "src": "contracts/fantom/FujiVaultFTM.sol:50"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "fujiERC1155",
            "type": "t_address",
            "src": "contracts/fantom/FujiVaultFTM.sol:51"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "oracle",
            "type": "t_contract(IFujiOracle)11006",
            "src": "contracts/fantom/FujiVaultFTM.sol:52"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:54"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_collateralAssetDecimals",
            "type": "t_uint8",
            "src": "contracts/fantom/FujiVaultFTM.sol:56"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_borrowAssetDecimals",
            "type": "t_uint8",
            "src": "contracts/fantom/FujiVaultFTM.sol:57"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_userFeeTimestamps",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/fantom/FujiVaultFTM.sol:61"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "remainingProtocolFee",
            "type": "t_uint256",
            "src": "contracts/fantom/FujiVaultFTM.sol:62"
          }
        ],
        "types": {
          "t_struct(Factor)6861_storage": {
            "label": "struct FujiVaultFTM.Factor",
            "members": [
              {
                "label": "a",
                "type": "t_uint64"
              },
              {
                "label": "b",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IFujiAdmin)10915": {
            "label": "contract IFujiAdmin"
          },
          "t_contract(IFujiOracle)11006": {
            "label": "contract IFujiOracle"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(VaultAssets)11293_storage": {
            "label": "struct IVaultControl.VaultAssets",
            "members": [
              {
                "label": "collateralAsset",
                "type": "t_address"
              },
              {
                "label": "borrowAsset",
                "type": "t_address"
              },
              {
                "label": "collateralID",
                "type": "t_uint64"
              },
              {
                "label": "borrowID",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cf10405ef279d649cf85d04779e2da9ab8b1cdf825026df0ba42e035272da84f": {
      "address": "0x73AF71612aAB4D18D55344Dba95Ea8d6DEe78b80",
      "txHash": "0xabf49be7c80119f38525d9451e6d9c6454c17c478d6f592096ebf6750204e8c4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:77"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:96"
          },
          {
            "contract": "VaultControlUpgradeable",
            "label": "vAssets",
            "type": "t_struct(VaultAssets)12374_storage",
            "src": "contracts\\abstracts\\vault\\VaultBaseUpgradeable.sol:20"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "safetyF",
            "type": "t_struct(Factor)12238_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:36"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "collatF",
            "type": "t_struct(Factor)12238_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:39"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "protocolFee",
            "type": "t_struct(Factor)12238_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:42"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "bonusLiqF",
            "type": "t_struct(Factor)12238_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:45"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "providers",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:48"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "activeProvider",
            "type": "t_address",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:49"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_fujiAdmin",
            "type": "t_contract(IFujiAdmin)11898",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:51"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "fujiERC1155",
            "type": "t_address",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:52"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "oracle",
            "type": "t_contract(IFujiOracle)12032",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:53"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:55"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_collateralAssetDecimals",
            "type": "t_uint8",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:57"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_borrowAssetDecimals",
            "type": "t_uint8",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:58"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_userFeeTimestamps",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:62"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "remainingProtocolFee",
            "type": "t_uint256",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:63"
          }
        ],
        "types": {
          "t_struct(Factor)12238_storage": {
            "label": "struct IVault.Factor",
            "members": [
              {
                "label": "a",
                "type": "t_uint64"
              },
              {
                "label": "b",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IFujiAdmin)11898": {
            "label": "contract IFujiAdmin"
          },
          "t_contract(IFujiOracle)12032": {
            "label": "contract IFujiOracle"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(VaultAssets)12374_storage": {
            "label": "struct IVaultControl.VaultAssets",
            "members": [
              {
                "label": "collateralAsset",
                "type": "t_address"
              },
              {
                "label": "borrowAsset",
                "type": "t_address"
              },
              {
                "label": "collateralID",
                "type": "t_uint64"
              },
              {
                "label": "borrowID",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "abc990aa92b8eaf6372d47bb1f162dcf1bda8514759edbbae21e3052bd4c91b6": {
      "address": "0x45fbFD9742e63649b3AEF6A37200E9f3Ff9f9aCa",
      "txHash": "0xa76ca73278be2d61b2c6ece7ba86679410e2fcb4ce625bcd75da44ed0ca964a9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:77"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:96"
          },
          {
            "contract": "VaultControlUpgradeable",
            "label": "vAssets",
            "type": "t_struct(VaultAssets)12384_storage",
            "src": "contracts\\abstracts\\vault\\VaultBaseUpgradeable.sol:20"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "safetyF",
            "type": "t_struct(Factor)12248_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:36"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "collatF",
            "type": "t_struct(Factor)12248_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:39"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "protocolFee",
            "type": "t_struct(Factor)12248_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:42"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "bonusLiqF",
            "type": "t_struct(Factor)12248_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:45"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "providers",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:48"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "activeProvider",
            "type": "t_address",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:49"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_fujiAdmin",
            "type": "t_contract(IFujiAdmin)11934",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:51"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "fujiERC1155",
            "type": "t_address",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:52"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "oracle",
            "type": "t_contract(IFujiOracle)12042",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:53"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:55"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_collateralAssetDecimals",
            "type": "t_uint8",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:57"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_borrowAssetDecimals",
            "type": "t_uint8",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:58"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_userFeeTimestamps",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:62"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "remainingProtocolFee",
            "type": "t_uint256",
            "src": "contracts\\fantom\\FujiVaultFTM.sol:63"
          }
        ],
        "types": {
          "t_struct(Factor)12248_storage": {
            "label": "struct IVault.Factor",
            "members": [
              {
                "label": "a",
                "type": "t_uint64"
              },
              {
                "label": "b",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IFujiAdmin)11934": {
            "label": "contract IFujiAdmin"
          },
          "t_contract(IFujiOracle)12042": {
            "label": "contract IFujiOracle"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(VaultAssets)12384_storage": {
            "label": "struct IVaultControl.VaultAssets",
            "members": [
              {
                "label": "collateralAsset",
                "type": "t_address"
              },
              {
                "label": "borrowAsset",
                "type": "t_address"
              },
              {
                "label": "collateralID",
                "type": "t_uint64"
              },
              {
                "label": "borrowID",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e4d7db92d15fd816e1bb95ab53e2397b298684f1f7c89df698632e6f06cd5997": {
      "address": "0x5110Ec1e9f9Ee08ea8B884EB3be4FaACE8960fd8",
      "txHash": "0xafc28574e44417d41bb7e3c27594e1b678202125d8550ee3577c39c1a430e427",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "contract": "VaultControlUpgradeable",
            "label": "vAssets",
            "type": "t_struct(VaultAssets)24290_storage",
            "src": "contracts/abstracts/vault/VaultBaseUpgradeable.sol:20"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "safetyF",
            "type": "t_struct(Factor)24154_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:42"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "collatF",
            "type": "t_struct(Factor)24154_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:45"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "protocolFee",
            "type": "t_struct(Factor)24154_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:48"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "bonusLiqF",
            "type": "t_struct(Factor)24154_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:51"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "providers",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:54"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "activeProvider",
            "type": "t_address",
            "src": "contracts/fantom/FujiVaultFTM.sol:55"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_fujiAdmin",
            "type": "t_contract(IFujiAdmin)23814",
            "src": "contracts/fantom/FujiVaultFTM.sol:57"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "fujiERC1155",
            "type": "t_address",
            "src": "contracts/fantom/FujiVaultFTM.sol:58"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "oracle",
            "type": "t_contract(IFujiOracle)23948",
            "src": "contracts/fantom/FujiVaultFTM.sol:59"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/fantom/FujiVaultFTM.sol:61"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_collateralAssetDecimals",
            "type": "t_uint8",
            "src": "contracts/fantom/FujiVaultFTM.sol:63"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_borrowAssetDecimals",
            "type": "t_uint8",
            "src": "contracts/fantom/FujiVaultFTM.sol:64"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "_userFeeTimestamps",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/fantom/FujiVaultFTM.sol:68"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "remainingProtocolFee",
            "type": "t_uint256",
            "src": "contracts/fantom/FujiVaultFTM.sol:69"
          },
          {
            "contract": "FujiVaultFTM",
            "label": "nftGame",
            "type": "t_address",
            "src": "contracts/fantom/FujiVaultFTM.sol:71"
          }
        ],
        "types": {
          "t_struct(Factor)24154_storage": {
            "label": "struct IVault.Factor",
            "members": [
              {
                "label": "a",
                "type": "t_uint64"
              },
              {
                "label": "b",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IFujiAdmin)23814": {
            "label": "contract IFujiAdmin"
          },
          "t_contract(IFujiOracle)23948": {
            "label": "contract IFujiOracle"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(VaultAssets)24290_storage": {
            "label": "struct IVaultControl.VaultAssets",
            "members": [
              {
                "label": "collateralAsset",
                "type": "t_address"
              },
              {
                "label": "borrowAsset",
                "type": "t_address"
              },
              {
                "label": "collateralID",
                "type": "t_uint64"
              },
              {
                "label": "borrowID",
                "type": "t_uint64"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6daac48a47278ac5c178ef741282d59db614b0318c7b2e4aa2b06704ed45ca26": {
      "address": "0xB19EFA287ee9dc9f399AB53F6F923A29E0f0B480",
      "txHash": "0xdd1162b3826296cac2f6e4c39d7c14338e874375909df6a8bb61af1cceeead3e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "FujiBaseERC1155",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/abstracts/fujiERC1155/FujiBaseERC1155.sol:34"
          },
          {
            "contract": "FujiBaseERC1155",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/abstracts/fujiERC1155/FujiBaseERC1155.sol:37"
          },
          {
            "contract": "FujiBaseERC1155",
            "label": "_totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/abstracts/fujiERC1155/FujiBaseERC1155.sol:40"
          },
          {
            "contract": "FujiBaseERC1155",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/abstracts/fujiERC1155/FujiBaseERC1155.sol:44"
          },
          {
            "contract": "ClaimableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/abstracts/claimable/ClaimableUpgradeable.sol:13"
          },
          {
            "contract": "ClaimableUpgradeable",
            "label": "pendingOwner",
            "type": "t_address",
            "src": "contracts/abstracts/claimable/ClaimableUpgradeable.sol:15"
          },
          {
            "contract": "F1155Manager",
            "label": "addrPermit",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/abstracts/fujiERC1155/F1155Manager.sol:29"
          },
          {
            "contract": "FujiERC1155",
            "label": "assetIDs",
            "type": "t_mapping(t_enum(AssetType)23819,t_mapping(t_address,t_uint256))",
            "src": "contracts/FujiERC1155.sol:25"
          },
          {
            "contract": "FujiERC1155",
            "label": "assetIDtype",
            "type": "t_mapping(t_uint256,t_enum(AssetType)23819)",
            "src": "contracts/FujiERC1155.sol:28"
          },
          {
            "contract": "FujiERC1155",
            "label": "qtyOfManagedAssets",
            "type": "t_uint64",
            "src": "contracts/FujiERC1155.sol:30"
          },
          {
            "contract": "FujiERC1155",
            "label": "indexes",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/FujiERC1155.sol:34"
          }
        ],
        "types": {
          "t_mapping(t_enum(AssetType)23819,t_mapping(t_address,t_uint256))": {
            "label": "mapping(enum IFujiERC1155.AssetType => mapping(address => uint256))"
          },
          "t_enum(AssetType)23819": {
            "label": "enum IFujiERC1155.AssetType",
            "members": [
              "collateralToken",
              "debtToken"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_enum(AssetType)23819)": {
            "label": "mapping(uint256 => enum IFujiERC1155.AssetType)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c1cf8bc4668ff0d9c511f69b276c208015ee2ed5a94df0ca8179952d728971ac": {
      "address": "0x51025D2a5810B21bcE14a69eaf4F2a23fbBdB256",
      "txHash": "0xf4e4ad23398c61d13b10bf2bbfd669b0c2d684e22713cd7799bba830ffbe2f23",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:475"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "NFTGame",
            "label": "merkleRoot",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:52"
          },
          {
            "contract": "NFTGame",
            "label": "nftCardsAmount",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:53"
          },
          {
            "contract": "NFTGame",
            "label": "userdata",
            "type": "t_mapping(t_address,t_struct(UserData)16997_storage)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:55"
          },
          {
            "contract": "NFTGame",
            "label": "isClaimed",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:58"
          },
          {
            "contract": "NFTGame",
            "label": "totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:61"
          },
          {
            "contract": "NFTGame",
            "label": "validVaults",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:63"
          },
          {
            "contract": "NFTGame",
            "label": "gamePhaseTimestamps",
            "type": "t_array(t_uint256)4_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:70"
          },
          {
            "contract": "NFTGame",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:76"
          },
          {
            "contract": "NFTGame",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:78"
          }
        ],
        "types": {
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(UserData)16997_storage)": {
            "label": "mapping(address => struct NFTGame.UserData)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserData)16997_storage": {
            "label": "struct NFTGame.UserData",
            "members": [
              {
                "label": "lastTimestampUpdate",
                "type": "t_uint64"
              },
              {
                "label": "rateOfAccrual",
                "type": "t_uint64"
              },
              {
                "label": "accruedPoints",
                "type": "t_uint128"
              },
              {
                "label": "recordedDebtBalance",
                "type": "t_uint128"
              },
              {
                "label": "lockedNFTID",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)4_storage": {
            "label": "uint256[4]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2e5b0a9f5609505b93869fb8309ec2b45f0765fb8e307c60a430091a91bcd165": {
      "address": "0xe6b50f024a45B2E1F2bAE1CE17137406B9aC92C0",
      "txHash": "0xcd232df1286f9117e13c7627ca12437e0cfc008531f2e0c404dfeddde08babbb",
      "layout": {
        "storage": [
          {
            "contract": "FujiPriceAware",
            "label": "maxDelay",
            "type": "t_uint256",
            "src": "contracts/fantom/nft-bonds/FujiPriceAware.sol:10"
          },
          {
            "contract": "FujiPriceAware",
            "label": "_trustedSigner",
            "type": "t_address",
            "src": "contracts/fantom/nft-bonds/FujiPriceAware.sol:11"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "NFTInteractions",
            "label": "isRedstoneOracleOn",
            "type": "t_bool",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:68"
          },
          {
            "contract": "NFTInteractions",
            "label": "_crateRewards",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:71"
          },
          {
            "contract": "NFTInteractions",
            "label": "_probabilityIntervals",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:73"
          },
          {
            "contract": "NFTInteractions",
            "label": "nftGame",
            "type": "t_contract(NFTGame)6818",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:75"
          },
          {
            "contract": "NFTInteractions",
            "label": "_pointsID",
            "type": "t_uint256",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:76"
          },
          {
            "contract": "NFTInteractions",
            "label": "_nftgame_GAME_ADMIN",
            "type": "t_bytes32",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:77"
          },
          {
            "contract": "NFTInteractions",
            "label": "preTokenBonds",
            "type": "t_contract(PreTokenBonds)8896",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:79"
          },
          {
            "contract": "NFTInteractions",
            "label": "cratePrices",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:82"
          },
          {
            "contract": "NFTInteractions",
            "label": "cardBoost",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:85"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(NFTGame)6818": {
            "label": "contract NFTGame"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(PreTokenBonds)8896": {
            "label": "contract PreTokenBonds"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "87b8103283778349a3969d714465ee29faa7278cab9454e287d16069e0f3756f": {
      "address": "0xb781Ed19D13638A1F28c7e8988e3855989693AF9",
      "txHash": "0x6106529e4cf9b5ef470edb57a368ec3001ebd71d1d6aaaf59cf697d91fb069db",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:458"
          },
          {
            "contract": "VNFTCoreV2",
            "label": "_units",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:22"
          },
          {
            "contract": "VNFTCoreV2",
            "label": "_tokenApprovalUnits",
            "type": "t_mapping(t_uint256,t_struct(ApproveUnits)20157_storage)",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:25"
          },
          {
            "contract": "VNFTCoreV2",
            "label": "_slotTokens",
            "type": "t_mapping(t_uint256,t_struct(UintSet)6893_storage)",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:28"
          },
          {
            "contract": "VNFTCoreV2",
            "label": "_unitDecimals",
            "type": "t_uint8",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:30"
          },
          {
            "contract": "VoucherCore",
            "label": "voucherSlotMapping",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VoucherCore.sol:25"
          },
          {
            "contract": "VoucherCore",
            "label": "nextTokenId",
            "type": "t_uint32",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VoucherCore.sol:27"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "PreTokenBonds",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:33"
          },
          {
            "contract": "PreTokenBonds",
            "label": "nftGame",
            "type": "t_contract(NFTGame)18687",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:35"
          },
          {
            "contract": "PreTokenBonds",
            "label": "_nftgame_GAME_ADMIN",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:36"
          },
          {
            "contract": "PreTokenBonds",
            "label": "_nftgame_GAME_INTERACTOR",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:37"
          },
          {
            "contract": "PreTokenBonds",
            "label": "underlying",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:39"
          },
          {
            "contract": "PreTokenBonds",
            "label": "_bondSlotTimes",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:41"
          },
          {
            "contract": "PreTokenBonds",
            "label": "bondSlotMultiplier",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:44"
          },
          {
            "contract": "PreTokenBonds",
            "label": "bondPrice",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:46"
          },
          {
            "contract": "PreTokenBonds",
            "label": "_tokenBaseURI",
            "type": "t_string_storage",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:50"
          },
          {
            "contract": "PreTokenBonds",
            "label": "_contractURI",
            "type": "t_string_storage",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:51"
          },
          {
            "contract": "PreTokenBonds",
            "label": "_slotBaseURI",
            "type": "t_string_storage",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:52"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(NFTGame)18687": {
            "label": "contract NFTGame"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_uint256,t_struct(ApproveUnits)20157_storage)": {
            "label": "mapping(uint256 => struct VNFTCoreV2.ApproveUnits)"
          },
          "t_struct(ApproveUnits)20157_storage": {
            "label": "struct VNFTCoreV2.ApproveUnits",
            "members": [
              {
                "label": "approvals",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "label": "allowances",
                "type": "t_mapping(t_address,t_uint256)"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)6893_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)6893_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)6435_storage"
              }
            ]
          },
          "t_struct(Set)6435_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b2b56a2b55452632e1acd69c5cde30d0c8ede68e5de9e19c6064444beb57f382": {
      "address": "0xE3A8ECEdAf11cA4d5B5344C26748ffb3DA2bB624",
      "txHash": "0x6f77f28f70ebad4c644e25294d7373b0e497bd55ba5b45231e919d334abe3fce",
      "layout": {
        "storage": [
          {
            "contract": "FujiPriceAware",
            "label": "maxDelay",
            "type": "t_uint256",
            "src": "contracts/fantom/nft-bonds/FujiPriceAware.sol:10"
          },
          {
            "contract": "FujiPriceAware",
            "label": "_trustedSigner",
            "type": "t_address",
            "src": "contracts/fantom/nft-bonds/FujiPriceAware.sol:11"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "NFTInteractions",
            "label": "isRedstoneOracleOn",
            "type": "t_bool",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:68"
          },
          {
            "contract": "NFTInteractions",
            "label": "_crateRewards",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:71"
          },
          {
            "contract": "NFTInteractions",
            "label": "_probabilityIntervals",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:73"
          },
          {
            "contract": "NFTInteractions",
            "label": "nftGame",
            "type": "t_contract(NFTGame)6818",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:75"
          },
          {
            "contract": "NFTInteractions",
            "label": "_pointsID",
            "type": "t_uint256",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:76"
          },
          {
            "contract": "NFTInteractions",
            "label": "_nftgame_GAME_ADMIN",
            "type": "t_bytes32",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:77"
          },
          {
            "contract": "NFTInteractions",
            "label": "preTokenBonds",
            "type": "t_contract(PreTokenBonds)8896",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:79"
          },
          {
            "contract": "NFTInteractions",
            "label": "cratePrices",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:82"
          },
          {
            "contract": "NFTInteractions",
            "label": "cardBoost",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/fantom/nft-bonds/NFTInteractions.sol:85"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(NFTGame)6818": {
            "label": "contract NFTGame"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(PreTokenBonds)8896": {
            "label": "contract PreTokenBonds"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "e43193582b8959ad25a0e580e91685d01cf9fcb1ca72c567038c6fb7ae973ef1": {
      "address": "0x8B88CB8D390CCDDF697A28748AF4968a38B03738",
      "txHash": "0xe038f71cd2f91fd0c289bd8ec5fe622e9ec190d8b87d2195a651c867129e790a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:475"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "NFTGame",
            "label": "merkleRoot",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:67"
          },
          {
            "contract": "NFTGame",
            "label": "nftCardsAmount",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:68"
          },
          {
            "contract": "NFTGame",
            "label": "userdata",
            "type": "t_mapping(t_address,t_struct(UserData)17934_storage)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:70"
          },
          {
            "contract": "NFTGame",
            "label": "isClaimed",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:73"
          },
          {
            "contract": "NFTGame",
            "label": "totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:76"
          },
          {
            "contract": "NFTGame",
            "label": "validVaults",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:79"
          },
          {
            "contract": "NFTGame",
            "label": "gamePhaseTimestamps",
            "type": "t_array(t_uint256)4_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:86"
          },
          {
            "contract": "NFTGame",
            "label": "lockNFTdesc",
            "type": "t_contract(ILockNFTDescriptor)21110",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:88"
          },
          {
            "contract": "NFTGame",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:94"
          },
          {
            "contract": "NFTGame",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:96"
          },
          {
            "contract": "NFTGame",
            "label": "numPlayers",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:98"
          }
        ],
        "types": {
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(UserData)17934_storage)": {
            "label": "mapping(address => struct NFTGame.UserData)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserData)17934_storage": {
            "label": "struct NFTGame.UserData",
            "members": [
              {
                "label": "lastTimestampUpdate",
                "type": "t_uint64"
              },
              {
                "label": "rateOfAccrual",
                "type": "t_uint64"
              },
              {
                "label": "accruedPoints",
                "type": "t_uint128"
              },
              {
                "label": "recordedDebtBalance",
                "type": "t_uint128"
              },
              {
                "label": "finalScore",
                "type": "t_uint128"
              },
              {
                "label": "gearsCollected",
                "type": "t_uint128"
              },
              {
                "label": "lockedNFTID",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)4_storage": {
            "label": "uint256[4]"
          },
          "t_contract(ILockNFTDescriptor)21110": {
            "label": "contract ILockNFTDescriptor"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e2b730b7846967d5ad373694cb1ebbc3ac6ba2cc5787041c44bdbdcbcc5f1ede": {
      "address": "0x8601fF6ABfA65e1970F95701522bbF5249a4d0a2",
      "txHash": "0x6e5ec056b9cd711ffaa098fe7fc1809539f7b8c91066a318065320ca34f3aee2",
      "layout": {
        "storage": [
          {
            "contract": "FujiPriceAware",
            "label": "maxDelay",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\FujiPriceAware.sol:10"
          },
          {
            "contract": "FujiPriceAware",
            "label": "_trustedSigner",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\FujiPriceAware.sol:11"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "NFTInteractions",
            "label": "isRedstoneOracleOn",
            "type": "t_bool",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:73"
          },
          {
            "contract": "NFTInteractions",
            "label": "_crateRewards",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:76"
          },
          {
            "contract": "NFTInteractions",
            "label": "_probabilityIntervals",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:78"
          },
          {
            "contract": "NFTInteractions",
            "label": "nftGame",
            "type": "t_contract(NFTGame)6829",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:80"
          },
          {
            "contract": "NFTInteractions",
            "label": "_pointsID",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:81"
          },
          {
            "contract": "NFTInteractions",
            "label": "_nftgame_GAME_ADMIN",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:82"
          },
          {
            "contract": "NFTInteractions",
            "label": "preTokenBonds",
            "type": "t_contract(PreTokenBonds)8845",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:84"
          },
          {
            "contract": "NFTInteractions",
            "label": "cratePrices",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:87"
          },
          {
            "contract": "NFTInteractions",
            "label": "cardBoost",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:90"
          },
          {
            "contract": "NFTInteractions",
            "label": "mintedCards",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:93"
          },
          {
            "contract": "NFTInteractions",
            "label": "cardsCapTimestamp",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:95"
          },
          {
            "contract": "NFTInteractions",
            "label": "cardsPerDayRatio",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:97"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(NFTGame)6829": {
            "label": "contract NFTGame"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(PreTokenBonds)8845": {
            "label": "contract PreTokenBonds"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "08eea2a60c561c7d02741dcad2ef6819fe613318b8146b2b2481125cfd603b4e": {
      "address": "0x3381F86523f2Abc0E490321A40199CaADA1519db",
      "txHash": "0xbef5befb47de4233e15fae3537ce86e035d653dc200581e5e8d66b1040d911d2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:458"
          },
          {
            "contract": "VNFTCoreV2",
            "label": "_units",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:22"
          },
          {
            "contract": "VNFTCoreV2",
            "label": "_tokenApprovalUnits",
            "type": "t_mapping(t_uint256,t_struct(ApproveUnits)24147_storage)",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:25"
          },
          {
            "contract": "VNFTCoreV2",
            "label": "_slotTokens",
            "type": "t_mapping(t_uint256,t_struct(UintSet)6893_storage)",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:28"
          },
          {
            "contract": "VNFTCoreV2",
            "label": "_unitDecimals",
            "type": "t_uint8",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:30"
          },
          {
            "contract": "VoucherCore",
            "label": "voucherSlotMapping",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VoucherCore.sol:9"
          },
          {
            "contract": "VoucherCore",
            "label": "nextTokenId",
            "type": "t_uint32",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VoucherCore.sol:11"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "PreTokenBonds",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:34"
          },
          {
            "contract": "PreTokenBonds",
            "label": "nftGame",
            "type": "t_contract(NFTGame)19472",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:36"
          },
          {
            "contract": "PreTokenBonds",
            "label": "_nftgame_GAME_ADMIN",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:37"
          },
          {
            "contract": "PreTokenBonds",
            "label": "_nftgame_GAME_INTERACTOR",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:38"
          },
          {
            "contract": "PreTokenBonds",
            "label": "underlying",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:40"
          },
          {
            "contract": "PreTokenBonds",
            "label": "_bondSlotTimes",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:42"
          },
          {
            "contract": "PreTokenBonds",
            "label": "bondSlotMultiplier",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:45"
          },
          {
            "contract": "PreTokenBonds",
            "label": "bondPrice",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:47"
          },
          {
            "contract": "PreTokenBonds",
            "label": "voucherDescriptor",
            "type": "t_contract(IVNFTDescriptor)21227",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:50"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(NFTGame)19472": {
            "label": "contract NFTGame"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(IVNFTDescriptor)21227": {
            "label": "contract IVNFTDescriptor"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_uint256,t_struct(ApproveUnits)24147_storage)": {
            "label": "mapping(uint256 => struct VNFTCoreV2.ApproveUnits)"
          },
          "t_struct(ApproveUnits)24147_storage": {
            "label": "struct VNFTCoreV2.ApproveUnits",
            "members": [
              {
                "label": "approvals",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "label": "allowances",
                "type": "t_mapping(t_address,t_uint256)"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)6893_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)6893_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)6435_storage"
              }
            ]
          },
          "t_struct(Set)6435_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2c56aedfdf56b7dde27e312f136df5b432a2bb95969db1478af6450ce0106a9e": {
      "address": "0x3d061c65E06f45343f64ae1bB37b83775c43ff28",
      "txHash": "0x157637c086c30958e9c35df354955f75d4028fbd49964de0abf0d13914075219",
      "layout": {
        "storage": [
          {
            "contract": "FujiPriceAware",
            "label": "maxDelay",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\FujiPriceAware.sol:10"
          },
          {
            "contract": "FujiPriceAware",
            "label": "_trustedSigner",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\FujiPriceAware.sol:11"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "NFTInteractions",
            "label": "isRedstoneOracleOn",
            "type": "t_bool",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:73"
          },
          {
            "contract": "NFTInteractions",
            "label": "_crateRewards",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:76"
          },
          {
            "contract": "NFTInteractions",
            "label": "_probabilityIntervals",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:78"
          },
          {
            "contract": "NFTInteractions",
            "label": "nftGame",
            "type": "t_contract(NFTGame)6829",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:80"
          },
          {
            "contract": "NFTInteractions",
            "label": "_pointsID",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:81"
          },
          {
            "contract": "NFTInteractions",
            "label": "_nftgame_GAME_ADMIN",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:82"
          },
          {
            "contract": "NFTInteractions",
            "label": "preTokenBonds",
            "type": "t_contract(PreTokenBonds)8851",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:84"
          },
          {
            "contract": "NFTInteractions",
            "label": "cratePrices",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:87"
          },
          {
            "contract": "NFTInteractions",
            "label": "cardBoost",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:90"
          },
          {
            "contract": "NFTInteractions",
            "label": "mintedCards",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:93"
          },
          {
            "contract": "NFTInteractions",
            "label": "cardsCapTimestamp",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:95"
          },
          {
            "contract": "NFTInteractions",
            "label": "cardsPerDayRatio",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:97"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(NFTGame)6829": {
            "label": "contract NFTGame"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(PreTokenBonds)8851": {
            "label": "contract PreTokenBonds"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "eaa5cc5048701ae4b136e75440df86e9f1e5b2b4b59aeee573770876b569f041": {
      "address": "0xdb77dA1B44907d6Bc29c5A51587AEb0cb02c753b",
      "txHash": "0xcd3210795dd7d838a3f3d30f705bf0bfd11854881a484e16033424be9a6a9f7a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:475"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "NFTGame",
            "label": "merkleRoot",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:67"
          },
          {
            "contract": "NFTGame",
            "label": "nftCardsAmount",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:68"
          },
          {
            "contract": "NFTGame",
            "label": "userdata",
            "type": "t_mapping(t_address,t_struct(UserData)2438_storage)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:70"
          },
          {
            "contract": "NFTGame",
            "label": "isClaimed",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:73"
          },
          {
            "contract": "NFTGame",
            "label": "totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:76"
          },
          {
            "contract": "NFTGame",
            "label": "validVaults",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:79"
          },
          {
            "contract": "NFTGame",
            "label": "gamePhaseTimestamps",
            "type": "t_array(t_uint256)4_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:86"
          },
          {
            "contract": "NFTGame",
            "label": "lockNFTdesc",
            "type": "t_contract(ILockNFTDescriptor)4255",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:88"
          },
          {
            "contract": "NFTGame",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:94"
          },
          {
            "contract": "NFTGame",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:96"
          },
          {
            "contract": "NFTGame",
            "label": "numPlayers",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:98"
          }
        ],
        "types": {
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(UserData)2438_storage)": {
            "label": "mapping(address => struct NFTGame.UserData)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserData)2438_storage": {
            "label": "struct NFTGame.UserData",
            "members": [
              {
                "label": "lastTimestampUpdate",
                "type": "t_uint64"
              },
              {
                "label": "rateOfAccrual",
                "type": "t_uint64"
              },
              {
                "label": "accruedPoints",
                "type": "t_uint128"
              },
              {
                "label": "recordedDebtBalance",
                "type": "t_uint128"
              },
              {
                "label": "finalScore",
                "type": "t_uint128"
              },
              {
                "label": "gearsCollected",
                "type": "t_uint128"
              },
              {
                "label": "lockedNFTID",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)4_storage": {
            "label": "uint256[4]"
          },
          "t_contract(ILockNFTDescriptor)4255": {
            "label": "contract ILockNFTDescriptor"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bde3dd7faffe6323109ca9e60aea98aa6b8f4fe2236740a793b4adc663a01013": {
      "address": "0xBa3BA7cfb616dF6cA3847f141CB420cFC3C1aB00",
      "txHash": "0x867954885a04e16df4962893336e38eaed4f13ab4d3ce2dff29d2d2f60caa507",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:475"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "NFTGame",
            "label": "merkleRoot",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:67"
          },
          {
            "contract": "NFTGame",
            "label": "nftCardsAmount",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:68"
          },
          {
            "contract": "NFTGame",
            "label": "userdata",
            "type": "t_mapping(t_address,t_struct(UserData)2438_storage)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:70"
          },
          {
            "contract": "NFTGame",
            "label": "isClaimed",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:73"
          },
          {
            "contract": "NFTGame",
            "label": "totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:76"
          },
          {
            "contract": "NFTGame",
            "label": "validVaults",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:79"
          },
          {
            "contract": "NFTGame",
            "label": "gamePhaseTimestamps",
            "type": "t_array(t_uint256)4_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:86"
          },
          {
            "contract": "NFTGame",
            "label": "lockNFTdesc",
            "type": "t_contract(ILockNFTDescriptor)4277",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:88"
          },
          {
            "contract": "NFTGame",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:94"
          },
          {
            "contract": "NFTGame",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:96"
          },
          {
            "contract": "NFTGame",
            "label": "numPlayers",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:98"
          }
        ],
        "types": {
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(UserData)2438_storage)": {
            "label": "mapping(address => struct NFTGame.UserData)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserData)2438_storage": {
            "label": "struct NFTGame.UserData",
            "members": [
              {
                "label": "lastTimestampUpdate",
                "type": "t_uint64"
              },
              {
                "label": "rateOfAccrual",
                "type": "t_uint64"
              },
              {
                "label": "accruedPoints",
                "type": "t_uint128"
              },
              {
                "label": "recordedDebtBalance",
                "type": "t_uint128"
              },
              {
                "label": "finalScore",
                "type": "t_uint128"
              },
              {
                "label": "gearsCollected",
                "type": "t_uint128"
              },
              {
                "label": "lockedNFTID",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)4_storage": {
            "label": "uint256[4]"
          },
          "t_contract(ILockNFTDescriptor)4277": {
            "label": "contract ILockNFTDescriptor"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4f290d02a2cd29cfc8d80fca1f4909972b5dd6d472e5c109082da8b44760dc07": {
      "address": "0xE332c3d52C5e93577AD85FAf71b8Ba39B720C1c0",
      "txHash": "0x1aefffe011f9c0957caa7ffb6aa1e817649bb24182cf768e4b70f27c4c7a41fe",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:475"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "NFTGame",
            "label": "merkleRoot",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:67"
          },
          {
            "contract": "NFTGame",
            "label": "nftCardsAmount",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:68"
          },
          {
            "contract": "NFTGame",
            "label": "userdata",
            "type": "t_mapping(t_address,t_struct(UserData)17930_storage)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:70"
          },
          {
            "contract": "NFTGame",
            "label": "isClaimed",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:73"
          },
          {
            "contract": "NFTGame",
            "label": "totalSupply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:76"
          },
          {
            "contract": "NFTGame",
            "label": "validVaults",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:79"
          },
          {
            "contract": "NFTGame",
            "label": "gamePhaseTimestamps",
            "type": "t_array(t_uint256)4_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:86"
          },
          {
            "contract": "NFTGame",
            "label": "lockNFTdesc",
            "type": "t_contract(ILockNFTDescriptor)21243",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:88"
          },
          {
            "contract": "NFTGame",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:94"
          },
          {
            "contract": "NFTGame",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:96"
          },
          {
            "contract": "NFTGame",
            "label": "numPlayers",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:98"
          }
        ],
        "types": {
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(UserData)17930_storage)": {
            "label": "mapping(address => struct NFTGame.UserData)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserData)17930_storage": {
            "label": "struct NFTGame.UserData",
            "members": [
              {
                "label": "lastTimestampUpdate",
                "type": "t_uint64"
              },
              {
                "label": "rateOfAccrual",
                "type": "t_uint64"
              },
              {
                "label": "accruedPoints",
                "type": "t_uint128"
              },
              {
                "label": "recordedDebtBalance",
                "type": "t_uint128"
              },
              {
                "label": "finalScore",
                "type": "t_uint128"
              },
              {
                "label": "gearsCollected",
                "type": "t_uint128"
              },
              {
                "label": "lockedNFTID",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)4_storage": {
            "label": "uint256[4]"
          },
          "t_contract(ILockNFTDescriptor)21243": {
            "label": "contract ILockNFTDescriptor"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5289ad8346dee663cbe068f5af6efc16284a48dccd65516a5db81bb5bf75f306": {
      "address": "0x5526c3a1a306bfFc77421F1E5Be91f99CD26c7B4",
      "txHash": "0x93a2b917d9eccab1e1d185afb5724921889203b63ef100ac535d295936e6a6e5",
      "layout": {
        "storage": [
          {
            "contract": "FujiPriceAware",
            "label": "maxDelay",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\FujiPriceAware.sol:10"
          },
          {
            "contract": "FujiPriceAware",
            "label": "_trustedSigner",
            "type": "t_address",
            "src": "contracts\\fantom\\nft-bonds\\FujiPriceAware.sol:11"
          },
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "NFTInteractions",
            "label": "isRedstoneOracleOn",
            "type": "t_bool",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:73"
          },
          {
            "contract": "NFTInteractions",
            "label": "_crateRewards",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:76"
          },
          {
            "contract": "NFTInteractions",
            "label": "_probabilityIntervals",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:78"
          },
          {
            "contract": "NFTInteractions",
            "label": "nftGame",
            "type": "t_contract(NFTGame)7310",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:80"
          },
          {
            "contract": "NFTInteractions",
            "label": "_pointsID",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:81"
          },
          {
            "contract": "NFTInteractions",
            "label": "_nftgame_GAME_ADMIN",
            "type": "t_bytes32",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:82"
          },
          {
            "contract": "NFTInteractions",
            "label": "preTokenBonds",
            "type": "t_contract(PreTokenBonds)9445",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:84"
          },
          {
            "contract": "NFTInteractions",
            "label": "cratePrices",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:87"
          },
          {
            "contract": "NFTInteractions",
            "label": "cardBoost",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:90"
          },
          {
            "contract": "NFTInteractions",
            "label": "mintedCards",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:93"
          },
          {
            "contract": "NFTInteractions",
            "label": "cardsCapTimestamp",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:95"
          },
          {
            "contract": "NFTInteractions",
            "label": "cardsPerDayRatio",
            "type": "t_uint256",
            "src": "contracts\\fantom\\nft-bonds\\NFTInteractions.sol:97"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_contract(NFTGame)7310": {
            "label": "contract NFTGame"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(PreTokenBonds)9445": {
            "label": "contract PreTokenBonds"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "0b5051f9ca741a743ce7bfa1f5ea1e676c060ebd4d2dc069a807014518857d66": {
      "address": "0xD74db12C701626992091Ea85C0e8ED893b62A84f",
      "txHash": "0xfc46870ebc760e1b7b1b091ba618207ad4271e1e46f696052937fabd071bce0f",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:458"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "153",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "154",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "155",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "_units",
            "offset": 0,
            "slot": "201",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "VNFTCoreV2",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:22"
          },
          {
            "label": "_tokenApprovalUnits",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_uint256,t_struct(ApproveUnits)30710_storage)",
            "contract": "VNFTCoreV2",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:25"
          },
          {
            "label": "_slotTokens",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_struct(UintSet)7482_storage)",
            "contract": "VNFTCoreV2",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:28"
          },
          {
            "label": "_unitDecimals",
            "offset": 0,
            "slot": "204",
            "type": "t_uint8",
            "contract": "VNFTCoreV2",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VNFTCoreV2.sol:30"
          },
          {
            "label": "voucherSlotMapping",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "VoucherCore",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VoucherCore.sol:9"
          },
          {
            "label": "nextTokenId",
            "offset": 0,
            "slot": "206",
            "type": "t_uint32",
            "contract": "VoucherCore",
            "src": "contracts\\fantom\\nft-bonds\\utils\\VoucherCore.sol:11"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "207",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "208",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:247"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "257",
            "type": "t_address",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:43"
          },
          {
            "label": "nftGame",
            "offset": 0,
            "slot": "258",
            "type": "t_contract(NFTGame)24980",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:45"
          },
          {
            "label": "_nftgame_GAME_ADMIN",
            "offset": 0,
            "slot": "259",
            "type": "t_bytes32",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:46"
          },
          {
            "label": "_nftgame_GAME_INTERACTOR",
            "offset": 0,
            "slot": "260",
            "type": "t_bytes32",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:47"
          },
          {
            "label": "underlying",
            "offset": 0,
            "slot": "261",
            "type": "t_address",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:49"
          },
          {
            "label": "underlyingAmount",
            "offset": 0,
            "slot": "262",
            "type": "t_uint256",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:50"
          },
          {
            "label": "_bondSlotTimes",
            "offset": 0,
            "slot": "263",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:52"
          },
          {
            "label": "bondSlotMultiplier",
            "offset": 0,
            "slot": "264",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:55"
          },
          {
            "label": "bondPrice",
            "offset": 0,
            "slot": "265",
            "type": "t_uint256",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:57"
          },
          {
            "label": "vestingStartTimestamp",
            "offset": 0,
            "slot": "266",
            "type": "t_uint256",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:59"
          },
          {
            "label": "tgeActive",
            "offset": 0,
            "slot": "267",
            "type": "t_bool",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:61"
          },
          {
            "label": "voucherDescriptor",
            "offset": 1,
            "slot": "267",
            "type": "t_contract(IVNFTDescriptor)27045",
            "contract": "PreTokenBonds",
            "src": "contracts\\fantom\\nft-bonds\\PreTokenBonds.sol:64"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IVNFTDescriptor)27045": {
            "label": "contract IVNFTDescriptor",
            "numberOfBytes": "20"
          },
          "t_contract(NFTGame)24980": {
            "label": "contract NFTGame",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ApproveUnits)30710_storage)": {
            "label": "mapping(uint256 => struct VNFTCoreV2.ApproveUnits)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(UintSet)7482_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ApproveUnits)30710_storage": {
            "label": "struct VNFTCoreV2.ApproveUnits",
            "members": [
              {
                "label": "approvals",
                "type": "t_array(t_address)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "allowances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)7024_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UintSet)7482_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)7024_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "b3a60a056f4589ac69419dae1198502d2e9089974a9eba4edf3170f5d07aa22b": {
      "address": "0x2E6FCb7940F4d6D40553848fdE3E413c8D45247b",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "102",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "103",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:522"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:247"
          },
          {
            "label": "merkleRoot",
            "offset": 0,
            "slot": "201",
            "type": "t_bytes32",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:67"
          },
          {
            "label": "nftCardsAmount",
            "offset": 0,
            "slot": "202",
            "type": "t_uint256",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:68"
          },
          {
            "label": "userdata",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_address,t_struct(UserData)23077_storage)",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:70"
          },
          {
            "label": "isClaimed",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:73"
          },
          {
            "label": "totalSupply",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:76"
          },
          {
            "label": "validVaults",
            "offset": 0,
            "slot": "206",
            "type": "t_array(t_address)dyn_storage",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:79"
          },
          {
            "label": "gamePhaseTimestamps",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)4_storage",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:86"
          },
          {
            "label": "lockNFTdesc",
            "offset": 0,
            "slot": "211",
            "type": "t_contract(ILockNFTDescriptor)26692",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:88"
          },
          {
            "label": "contractURI",
            "offset": 0,
            "slot": "212",
            "type": "t_string_storage",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:94"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "213",
            "type": "t_address",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:96"
          },
          {
            "label": "numPlayers",
            "offset": 0,
            "slot": "214",
            "type": "t_uint256",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:98"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)4_storage": {
            "label": "uint256[4]",
            "numberOfBytes": "128"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(ILockNFTDescriptor)26692": {
            "label": "contract ILockNFTDescriptor",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserData)23077_storage)": {
            "label": "mapping(address => struct NFTGame.UserData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UserData)23077_storage": {
            "label": "struct NFTGame.UserData",
            "members": [
              {
                "label": "lastTimestampUpdate",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rateOfAccrual",
                "type": "t_uint64",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "accruedPoints",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "recordedDebtBalance",
                "type": "t_uint128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "finalScore",
                "type": "t_uint128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "gearsCollected",
                "type": "t_uint128",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "lockedNFTID",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "b26d95506138873496c1fabf3f960f5059dda851cf6c961ccad109168b446899": {
      "address": "0x71AB6c541C7B1ed3b55aB26BeA0224cCC1b645cf",
      "txHash": "0x51328bafdacbe0f35b976ee99c703f92f5b54b7f9f316273f46a42a961beee96",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "102",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "103",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:522"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:247"
          },
          {
            "label": "merkleRoot",
            "offset": 0,
            "slot": "201",
            "type": "t_bytes32",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:67"
          },
          {
            "label": "nftCardsAmount",
            "offset": 0,
            "slot": "202",
            "type": "t_uint256",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:68"
          },
          {
            "label": "userdata",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_address,t_struct(UserData)23077_storage)",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:70"
          },
          {
            "label": "isClaimed",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:73"
          },
          {
            "label": "totalSupply",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:76"
          },
          {
            "label": "validVaults",
            "offset": 0,
            "slot": "206",
            "type": "t_array(t_address)dyn_storage",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:79"
          },
          {
            "label": "gamePhaseTimestamps",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)4_storage",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:86"
          },
          {
            "label": "lockNFTdesc",
            "offset": 0,
            "slot": "211",
            "type": "t_contract(ILockNFTDescriptor)26764",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:88"
          },
          {
            "label": "contractURI",
            "offset": 0,
            "slot": "212",
            "type": "t_string_storage",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:94"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "213",
            "type": "t_address",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:96"
          },
          {
            "label": "numPlayers",
            "offset": 0,
            "slot": "214",
            "type": "t_uint256",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:98"
          },
          {
            "label": "ownerOfLockNFT",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:101"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)4_storage": {
            "label": "uint256[4]",
            "numberOfBytes": "128"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(ILockNFTDescriptor)26764": {
            "label": "contract ILockNFTDescriptor",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserData)23077_storage)": {
            "label": "mapping(address => struct NFTGame.UserData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UserData)23077_storage": {
            "label": "struct NFTGame.UserData",
            "members": [
              {
                "label": "lastTimestampUpdate",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rateOfAccrual",
                "type": "t_uint64",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "accruedPoints",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "recordedDebtBalance",
                "type": "t_uint128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "finalScore",
                "type": "t_uint128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "gearPower",
                "type": "t_uint128",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "lockedNFTID",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "0c18d5665bf3bf3fcc006762b35816f52146f4fd7b603161cf27ca1e5e1c26b7": {
      "address": "0x3bf42192af9C00DACCE35fa759e30A7206E4FC53",
      "txHash": "0xca8c6875e115ff56a2c9aa26279c04c43b7be07e7aeb30a0a161ab0bf5f2e90e",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "102",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "103",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:522"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:247"
          },
          {
            "label": "merkleRoot",
            "offset": 0,
            "slot": "201",
            "type": "t_bytes32",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:67"
          },
          {
            "label": "nftCardsAmount",
            "offset": 0,
            "slot": "202",
            "type": "t_uint256",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:68"
          },
          {
            "label": "userdata",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_address,t_struct(UserData)23077_storage)",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:70"
          },
          {
            "label": "isClaimed",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:73"
          },
          {
            "label": "totalSupply",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:76"
          },
          {
            "label": "validVaults",
            "offset": 0,
            "slot": "206",
            "type": "t_array(t_address)dyn_storage",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:79"
          },
          {
            "label": "gamePhaseTimestamps",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)4_storage",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:86"
          },
          {
            "label": "lockNFTdesc",
            "offset": 0,
            "slot": "211",
            "type": "t_contract(ILockNFTDescriptor)26771",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:88"
          },
          {
            "label": "contractURI",
            "offset": 0,
            "slot": "212",
            "type": "t_string_storage",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:94"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "213",
            "type": "t_address",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:96"
          },
          {
            "label": "numPlayers",
            "offset": 0,
            "slot": "214",
            "type": "t_uint256",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:98"
          },
          {
            "label": "ownerOfLockNFT",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "NFTGame",
            "src": "contracts\\fantom\\nft-bonds\\NFTGame.sol:101"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)4_storage": {
            "label": "uint256[4]",
            "numberOfBytes": "128"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(ILockNFTDescriptor)26771": {
            "label": "contract ILockNFTDescriptor",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserData)23077_storage)": {
            "label": "mapping(address => struct NFTGame.UserData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UserData)23077_storage": {
            "label": "struct NFTGame.UserData",
            "members": [
              {
                "label": "lastTimestampUpdate",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rateOfAccrual",
                "type": "t_uint64",
                "offset": 8,
                "slot": "0"
              },
              {
                "label": "accruedPoints",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "recordedDebtBalance",
                "type": "t_uint128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "finalScore",
                "type": "t_uint128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "gearPower",
                "type": "t_uint128",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "lockedNFTID",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "f89413cd0613ac819016b3e80e5601c2b2524375b147b816afbe7b7510ada41f": {
      "address": "0xFa6C634FCd389221a1F235778f1bD1F29Cf085e1",
      "txHash": "0xa25dd79b255a01d0f6c81506ca1f931fe8acfe9566778cde6cea9fe965b7dff9",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
          },
          {
            "label": "nftGame",
            "offset": 0,
            "slot": "101",
            "type": "t_contract(NFTGame)24987",
            "contract": "LockSVG",
            "src": "contracts\\fantom\\nft-bonds\\utils\\LockSVG.sol:21"
          },
          {
            "label": "_nftgame_GAME_ADMIN",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32",
            "contract": "LockSVG",
            "src": "contracts\\fantom\\nft-bonds\\utils\\LockSVG.sol:23"
          },
          {
            "label": "nicknames",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_address,t_string_storage)",
            "contract": "LockSVG",
            "src": "contracts\\fantom\\nft-bonds\\utils\\LockSVG.sol:25"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(NFTGame)24987": {
            "label": "contract NFTGame",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_string_storage)": {
            "label": "mapping(address => string)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
